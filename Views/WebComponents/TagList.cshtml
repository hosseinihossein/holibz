@model List<string>

<style>
    #title-banner-ef62ff6f1d8d43c5a2e1cd7b2e5af1a9 {
        color: white;
        background-color: lawngreen;
        border: 2px solid green;
        border-radius: 10px;
        text-align: center;
    }

    #title-banner-ef62ff6f1d8d43c5a2e1cd7b2e5af1a9 h1 {
        margin: 10px;
    }
</style>
<div id="title-banner-ef62ff6f1d8d43c5a2e1cd7b2e5af1a9">
    <h1>Tags Administration</h1>
</div>

<br>
<hr>
<form class="clearfix" asp-action="SubmitNewTag" method="get">
    <style>
        #searche62f342a43f0412baf7908d6236c65ec #myInput {
            background-image: url('/Images/icons8-search-50.png');
            background-size: 1.5rem;
            /* Add a search icon to input */
            background-position: 5px 10px;
            /* Position the search icon */
            background-repeat: no-repeat;
            /* Do not repeat the icon image */
            width: 300px;
            /* Full-width */
            font-size: 16px;
            /* Increase font-size */
            padding: 12px 20px 12px 40px;
            /* Add some padding */
            border: 1px solid #ddd;
            /* Add a grey border */
            margin-bottom: 12px;
            /* Add some space below the input */
            float: left;
        }

        #searche62f342a43f0412baf7908d6236c65ec #myUL {
            /* Remove default list styling */
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        #searche62f342a43f0412baf7908d6236c65ec #myUL li a {
            border: 1px solid #ddd;
            /* Add a border to all links */
            margin-top: -1px;
            /* Prevent double borders */
            background-color: #f6f6f6;
            /* Grey background color */
            padding: 12px;
            /* Add some padding */
            text-decoration: none;
            /* Remove default text underline */
            font-size: 18px;
            /* Increase the font-size */
            color: black;
            /* Add a black text color */
            display: block;
            /* Make it into a block element to fill the whole list */
        }

        #searche62f342a43f0412baf7908d6236c65ec #myUL li a:hover:not(.header) {
            background-color: #eee;
            /* Add a hover effect to all links, except for headers */
        }

        @@media screen and (max-width:700px) {
            #searche62f342a43f0412baf7908d6236c65ec #myInput {
                width: 100%;
            }
        }
    </style>

    <div id="searche62f342a43f0412baf7908d6236c65ec">
        <input type="text" name="tagname" required id="myInput"
            onkeyup="filter_Script_a0d21024282f453f8247fefa6ec435f2(this)" placeholder="Search for names..">
    </div>

    <style>
        #add-tag-form button,
        #add-tag-form a {
            text-decoration: none;
            font-size: 16px;
            color: #333;
            background-color: lawngreen;
            border: 1px solid green;
            border-radius: 10px;
            display: block;
            padding: 15px 30px;
            width: fit-content;
            opacity: 0.8;
            float: right;
            cursor: pointer;
            margin: 0 5px;
            text-decoration: none;
        }

        #add-tag-form button:hover,
        #add-tag-form a:hover {
            opacity: 1;
            background-color: green;
            color: white;
        }
    </style>
    <div id="add-tag-form">
        <a asp-action="BackupTags"><i class="fa-solid fa-database"></i> Backup</a>
        <button type="submit"><i class="fa-solid fa-plus"></i> Add as a new tag</button>
    </div>
</form>

<style>
    #e8813f129b12403cb81f1972752d4856 {
        position: relative;
        overflow: visible;
        margin: 20px 0;
    }

    #e8813f129b12403cb81f1972752d4856::after {
        content: "Tags(@Model.Count)";
        position: absolute;
        /*top: -10px;*/
        right: 50%;
        translate: 50% -50%;
        background-color: white;
        border: 1px solid gray;
        padding: 5px 10px;

    }
</style>
<hr id="e8813f129b12403cb81f1972752d4856">
<br>

<!------------------------------ Table ------------------------------>
<style>
    /* Customize the label (the container) */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container {
        display: block;
        position: relative;
        padding-left: 35px;
        /*margin-bottom: 12px;*/
        cursor: pointer;
        font-size: 22px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }

    /* Hide the browser's default checkbox */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    /* Create a custom checkbox */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .checkmark {
        position: absolute;
        top: -12px;
        left: 0;
        height: 25px;
        width: 25px;
        border-radius: 10px;
        border: 1px solid lightgray;
    }

    /* On mouse-over, add a grey background color */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container:hover input~.checkmark {
        background-color: #ccc;
    }

    /* When the checkbox is checked, add a blue background */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input:checked~.checkmark {
        background-color: #008cff;
    }

    /* Create the checkmark/indicator (hidden when not checked) */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    /* Show the checkmark when checked */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container input:checked~.checkmark:after {
        display: block;
    }

    /* Style the checkmark/indicator */
    #table12dd5b5c7e54455e85a83c209d1d5bb0 .formbd815e99e0f2479ab098c05b6dfc81f7 .container .checkmark:after {
        left: 8px;
        top: 4px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        transform: rotate(45deg);
    }

    /****************************************************************************************/
    #table12dd5b5c7e54455e85a83c209d1d5bb0 {
        width: 100%;
        background-color: rgba(250, 250, 250, 1);
        overflow-x: auto;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 table {
        border: none;
        width: 100%;
        border-collapse: collapse;
        border-spacing: 0;
        text-align: left;
        font-size: 14px;
        overflow-x: auto;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr {
        border-radius: 20px;
        transition: box-shadow 0.1s;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr:not(:first-child):hover {
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        background-color: white;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr:first-child {
        background-color: rgb(236, 236, 236);
        border: none;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr th:first-child,
    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:first-child {
        border-radius: 15px 0 0 15px;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr th:last-child,
    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child {
        border-radius: 0 15px 15px 0;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th,
    #table12dd5b5c7e54455e85a83c209d1d5bb0 td {
        border: none;
        margin: 0;
        padding: 5px 10px 5px 100px;
    }

    @@media screen and (max-width:600px) {

        #table12dd5b5c7e54455e85a83c209d1d5bb0 th,
        #table12dd5b5c7e54455e85a83c209d1d5bb0 td {
            padding: 5px 10px 5px 10px;
        }
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th {
        /*padding: 10px;*/
        color: gray;
        font-weight: normal;
    }

    /*#table12dd5b5c7e54455e85a83c209d1d5bb0 td {
        }*/

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td.bold {
        font-weight: bold;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span {
        padding: 5px 10px;
        font-size: 12px;
        border-radius: 10px;
    }

    /******************* color ****************/

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td.gray {
        color: gray;
        font-size: 12px;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.red {
        color: rgb(221, 0, 0);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.green {
        color: green;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.blue {
        color: blue;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.bg-red {
        background-color: rgba(255, 0, 0, 0.2);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.bg-green {
        background-color: rgba(124, 252, 0, 0.2);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td span.bg-blue {
        background-color: rgba(135, 206, 235, 0.2);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 table a {
        text-decoration: none;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child a,
    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child button {
        padding: 10px 20px;
        color: blue;
        font-size: 12px;
        background-color: rgba(255, 0, 0, 0.5);
        border-radius: 20px;
        /*border: 1px solid lightgray;*/
        border: none;
        cursor: pointer;
        font-weight: bold;
        display: block;
        width: fit-content;
        float: left;
        margin: 5px;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child a {
        background-color: rgba(255, 165, 0, 0.5);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child a:hover {
        background-color: rgba(255, 165, 0, 1);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 tr td:last-child a.delete:hover {
        /*background-color: rgba(135, 206, 235, 0.2);*/
        background-color: rgba(255, 0, 0, 1);
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th span.triangle {
        font-size: 22px;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th span.triangle.down {
        font-size: 20px;
        position: absolute;
        left: 95px;
    }

    @@media screen and (max-width:600px) {
        #table12dd5b5c7e54455e85a83c209d1d5bb0 th span.triangle.down {
            left: 5px;
        }
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th.clickable {
        cursor: pointer;
        position: relative;
    }

    #table12dd5b5c7e54455e85a83c209d1d5bb0 th.clickable:hover {
        color: black;
    }
</style>
<div id="table12dd5b5c7e54455e85a83c209d1d5bb0">
    <table>
        <tr>
            <th class="clickable" onclick="sortTable_Script_2d91d70614aa40bc8ced043c49b95824(this, 0)">
                <span class="triangle up">&blacktriangle;</span>
                <span class="triangle down">&blacktriangledown;</span>
                Tag Name
            </th>
            <th>Actions</th>
        </tr>

        @foreach (string tagName in Model)
        {
            <tr>
                <td class="filteredTD bold">@tagName</td>
                <td>
                    <a asp-action="DeleteTag" asp-route-tagname="@tagName" class="delete">Delete</a>
                </td>
            </tr>
        }
    </table>
</div>

<script>/*
Script_823253cc22454a5db45bb30b06747555

sorts table by letter by click on table head
*/
    function sortTable_Script_2d91d70614aa40bc8ced043c49b95824(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (tableData.innerHTML > nextTableData.innerHTML) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (tableData.innerHTML < nextTableData.innerHTML) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>
<script>/*
Script_823253cc22454a5db45bb30b06747555

sorts table by number by click on table head
*/
    function sortTable_Script_823253cc22454a5db45bb30b06747555(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (Number(tableData.innerHTML) > Number(nextTableData.innerHTML)) {
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (Number(tableData.innerHTML) < Number(nextTableData.innerHTML)) {
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>

<script>
    /*Script_7f93fc1a6ee040718d57e78df9d58200
    sorts table by date by click on table head*/

    function sortTable_Script_d321834585ae45f0b2e5190c2f7b476b(element, n) {
        let upTriangle = element.getElementsByClassName("up")[0];
        let downTriangle = element.getElementsByClassName("down")[0];

        let rows, switching, i, tableData, nextTableData, shouldSwitch, dir, switchcount = 0;
        let table = element.parentElement.parentElement;
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        upTriangle.style.visibility = "visible";
        downTriangle.style.visibility = "hidden";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                tableData = rows[i].getElementsByTagName("TD")[n];
                nextTableData = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (Date.parse(tableData.innerHTML) > Date.parse(nextTableData.innerHTML)) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (Date.parse(tableData.innerHTML) < Date.parse(nextTableData.innerHTML)) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                    upTriangle.style.visibility = "hidden";
                    downTriangle.style.visibility = "visible";
                }
            }
        }

    }
</script>

<script>
    function toggleAllCkeckboxes_table12dd5b5c7e54455e85a83c209d1d5bb0(element) {
        let mainTable = document.getElementById("table12dd5b5c7e54455e85a83c209d1d5bb0");
        let allRows = mainTable.getElementsByTagName("TR");
        for (let i = 1; i < allRows.length; i++) {
            if (element.checked) {
                allRows[i].getElementsByTagName("TD")[0].getElementsByTagName("input")[0].checked = true;
            }
            else {
                allRows[i].getElementsByTagName("TD")[0].getElementsByTagName("input")[0].checked = false;
            }
        }
    }
</script>

<script>
    let mytable = document.getElementById("table12dd5b5c7e54455e85a83c209d1d5bb0");
    let filteredTDs = mytable.getElementsByClassName("filteredTD");
    function filter_Script_a0d21024282f453f8247fefa6ec435f2(inputElement) {
        let filter, filteredContainer, filteredItems, innerFilteredItem, i, txtValue;
        filter = inputElement.value.toUpperCase();

        // Loop through all list items, and hide those who don't match the search query
        for (i = 0; i < filteredTDs.length; i++) {
            txtValue = filteredTDs[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                filteredTDs[i].parentElement.style.display = "";
            } else {
                filteredTDs[i].parentElement.style.display = "none";
            }
        }
    }
</script>